/**
 * This class is generated by jOOQ
 */
package SensorManager.SensorData.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.1.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensorDataRegistry extends org.jooq.impl.TableImpl<SensorManager.SensorData.tables.records.SensorDataRegistryRecord> {

	private static final long serialVersionUID = 1205531436;

	/**
	 * The singleton instance of <code>dssforut_db.sensor_data_registry</code>
	 */
	public static final SensorManager.SensorData.tables.SensorDataRegistry SENSOR_DATA_REGISTRY = new SensorManager.SensorData.tables.SensorDataRegistry();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<SensorManager.SensorData.tables.records.SensorDataRegistryRecord> getRecordType() {
		return SensorManager.SensorData.tables.records.SensorDataRegistryRecord.class;
	}

	/**
	 * The column <code>dssforut_db.sensor_data_registry.id</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The column <code>dssforut_db.sensor_data_registry.fecha</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.sql.Date> FECHA = createField("fecha", org.jooq.impl.SQLDataType.DATE, this);

	/**
	 * The column <code>dssforut_db.sensor_data_registry.hora</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.sql.Time> HORA = createField("hora", org.jooq.impl.SQLDataType.TIME, this);

	/**
	 * The column <code>dssforut_db.sensor_data_registry.dato</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.lang.String> DATO = createField("dato", org.jooq.impl.SQLDataType.VARCHAR.length(50), this);

	/**
	 * The column <code>dssforut_db.sensor_data_registry.variable</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.lang.String> VARIABLE = createField("variable", org.jooq.impl.SQLDataType.VARCHAR.length(50), this);

	/**
	 * The column <code>dssforut_db.sensor_data_registry.nodo</code>. 
	 */
	public final org.jooq.TableField<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.lang.String> NODO = createField("nodo", org.jooq.impl.SQLDataType.VARCHAR.length(50), this);

	/**
	 * Create a <code>dssforut_db.sensor_data_registry</code> table reference
	 */
	public SensorDataRegistry() {
		super("sensor_data_registry", SensorManager.SensorData.DssforutDb.DSSFORUT_DB);
	}

	/**
	 * Create an aliased <code>dssforut_db.sensor_data_registry</code> table reference
	 */
	public SensorDataRegistry(java.lang.String alias) {
		super(alias, SensorManager.SensorData.DssforutDb.DSSFORUT_DB, SensorManager.SensorData.tables.SensorDataRegistry.SENSOR_DATA_REGISTRY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<SensorManager.SensorData.tables.records.SensorDataRegistryRecord, java.lang.Integer> getIdentity() {
		return SensorManager.SensorData.Keys.IDENTITY_SENSOR_DATA_REGISTRY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<SensorManager.SensorData.tables.records.SensorDataRegistryRecord> getPrimaryKey() {
		return SensorManager.SensorData.Keys.KEY_SENSOR_DATA_REGISTRY_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<SensorManager.SensorData.tables.records.SensorDataRegistryRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<SensorManager.SensorData.tables.records.SensorDataRegistryRecord>>asList(SensorManager.SensorData.Keys.KEY_SENSOR_DATA_REGISTRY_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SensorManager.SensorData.tables.SensorDataRegistry as(java.lang.String alias) {
		return new SensorManager.SensorData.tables.SensorDataRegistry(alias);
	}
}
